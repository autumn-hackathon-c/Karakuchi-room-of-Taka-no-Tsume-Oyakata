# version: '3'

services:
  # サービス名
  django:
    build:
      context: .    #  ← プロジェクトルートをビルドコンテキストに！
      dockerfile: containers/Dockerfile   # Dockerfileのファイル名
    
    # 作成するコンテナ名の指定
    container_name: django

    # 使用するポートの設定
    ports:
      - "8000:8000"

    #envファイルの反映
    env_file:
      - .env          
    
    # 対話的なセッションやコマンドラインの操作を許可する
    tty: true
    volumes:
      - ${SRC_PATH:-./src}:/app     # ← src を /app にマウント
    working_dir: /app               # ← manage.py がここにある

    #起動コマンド
    command: python manage.py runserver 0.0.0.0:8000

    #DBと紐付け
    depends_on:
    #リクエストを受け入れられる状態になっていることを確認（ヘルスチェック）後にdjangoコンテナが起動するように設定
      db:
        condition: service_healthy

  # DB名
  db:
      image: mysql:8.0
      container_name: mysql
      restart: always
      ports:
        - "3306:3306"
        
  #環境変数の設定
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        TZ: Asia/Tokyo
      volumes:
          - db_data:/var/lib/mysql
      
      # envファイルの反映
      env_file:
        - .env 

      # DBのコンテナのヘルスチェックを行う
      # mysqladmin(MySQLサーバーの管理を行うクライアントを使ってDBコンテナ自身(127.0.0.1)にpingを送ってヘルスチェックを行う
      healthcheck:
        test: mysqladmin ping -h 127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD
        # ヘルスチェックのインターバルは10秒
        interval: 10s
        # タイムアウト時間は10秒
        timeout: 10s
        # リトライ回数は3回
        retries: 3
        # ヘルスチェックが失敗しても無視する時間は30秒
        start_period: 30s
      
            

volumes:
  db_data: